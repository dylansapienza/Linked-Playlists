require("dotenv").config({ path: __dirname + "/./../.env" });
const mongoose = require("mongoose");
var express = require("express"); // Express web server framework
var request = require("request"); // "Request" library
var cors = require("cors");
var querystring = require("querystring");
var cookieParser = require("cookie-parser");
const User = require("./modules/User");
const Playlist = require("./modules/Playlist");
const apiCalls = require("./api/apicalls");

//Need to add flags to avoid deprication MONGODB
mongoose.connect(
  "mongodb+srv://dylansap:spotifyapp@spotifyapp-eey1y.mongodb.net/test?retryWrites=true&w=majority",
  { dbName: "spotifyapp" }
);

var client_id = process.env.CLIENT_ID; // Your client id
var client_secret = process.env.CLIENT_SECRET; // Your secret
var redirect_uri = "http://localhost:8888/callback"; // Your redirect uri
/**
 * Generates a random string containing numbers and letters
 * @param  {number} length The length of the string
 * @return {string} The generated string
 */
var generateRandomString = function (length) {
  var text = "";
  var possible =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

  for (var i = 0; i < length; i++) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
};

var stateKey = "spotify_auth_state";

var app = express();

app
  .use(express.static(__dirname + "\\../public"))
  .use(cors())
  .use(cookieParser());

app.get("/login", function (req, res) {
  var state = generateRandomString(16);
  res.cookie(stateKey, state);

  // your application requests authorization
  var scope = "user-read-private user-read-email playlist-modify-public";
  res.redirect(
    "https://accounts.spotify.com/authorize?" +
      querystring.stringify({
        response_type: "code",
        client_id: client_id,
        scope: scope,
        redirect_uri: redirect_uri,
        state: state,
      })
  );
});

app.get("/callback", function (req, res) {
  // your application requests refresh and access tokens
  // after checking the state parameter

  var code = req.query.code || null;
  var state = req.query.state || null;
  var storedState = req.cookies ? req.cookies[stateKey] : null;

  if (state === null || state !== storedState) {
    res.redirect(
      "/#" +
        querystring.stringify({
          error: "state_mismatch",
        })
    );
  } else {
    res.clearCookie(stateKey);
    var authOptions = {
      url: "https://accounts.spotify.com/api/token",
      form: {
        code: code,
        redirect_uri: redirect_uri,
        grant_type: "authorization_code",
      },
      headers: {
        Authorization:
          "Basic " +
          new Buffer(client_id + ":" + client_secret).toString("base64"),
      },
      json: true,
    };

    request.post(authOptions, function (error, response, body) {
      if (!error && response.statusCode === 200) {
        var access_token = body.access_token,
          refresh_token = body.refresh_token;
        console.log(body);

        var options = {
          url: "https://api.spotify.com/v1/me",
          headers: { Authorization: "Bearer " + access_token },
          json: true,
        };

        request.get(options, function (error, response, body) {
          console.log(body);

          //Mongoose
          const user = new User({
            _id: new mongoose.Types.ObjectId(),
            name: body.display_name,
            access_token: access_token,
            refresh_token: refresh_token,
            id: body.id,
            email: body.email,
          });
          user.save().then((result) => {
            console.log(result);
          });
        });

        // we can also pass the token to the browser to make requests from there
        res.redirect(
          "/#" +
            querystring.stringify({
              access_token: access_token,
              refresh_token: refresh_token,
            })
        );
      } else {
        res.redirect(
          "/#" +
            querystring.stringify({
              error: "invalid_token",
            })
        );
      }
    });
  }
});

app.get("/api/playlist/:email", async function (req, res) {
  const queryemail = req.params.email;

  const output = await apiCalls.createPlaylist(queryemail);

  console.log(output);

  res.send(output);
  // User.findOne({ email: queryemail })
  //   .exec()
  //   .then((doc) => {
  //     console.log(doc);
  //     const query_userid = doc.id;
  //     const query_token = doc.access_token;
  //     const query_name = doc.name;
  //     const playlist_name = query_name + "'s Recommended Playlist";
  //     const playlist_description = "Auto-Generated By SpotifyPlaylistApp";

  //     var headers = {
  //       Accept: "application/json",
  //       "Content-Type": "application/json",
  //       Authorization: "Bearer " + query_token,
  //     };

  //     var dataString =
  //       '{"name":"' +
  //       playlist_name +
  //       '","description":"' +
  //       playlist_description +
  //       '","public":true}';

  //     var options = {
  //       url: "https://api.spotify.com/v1/users/" + query_userid + "/playlists",
  //       method: "POST",
  //       headers: headers,
  //       body: dataString,
  //     };

  //     function callback(error, response, body) {
  //       if (!error && response.statusCode == 201) {
  //         console.log(body);
  //         res.send("sucesss!");
  //       } else {
  //         console.log(error);
  //         if (response.statusCode === 401) {
  //           res.send("Authorization Token Expired or Invalid");
  //         } else {
  //           res.send("Great Failure:" + response.statusCode);
  //         }
  //       }
  //     }

  //     request(options, callback);
  //   })
  //   .catch((err) => {
  //     console.log(err);
  //   });
});

app.get("/refresh_token", function (req, res) {
  // requesting access token from refresh token
  var refresh_token = req.query.refresh_token;
  var authOptions = {
    url: "https://accounts.spotify.com/api/token",
    headers: {
      Authorization:
        "Basic " +
        new Buffer(client_id + ":" + client_secret).toString("base64"),
    },
    form: {
      grant_type: "refresh_token",
      refresh_token: refresh_token,
    },
    json: true,
  };

  request.post(authOptions, function (error, response, body) {
    if (!error && response.statusCode === 200) {
      var access_token = body.access_token;
      res.send({
        access_token: access_token,
      });
    }
  });
});

console.log("Listening on 8888");
app.listen(8888);
